//-------------------------------------------------------------------------
//    Ball.sv                                                            --
//    Viral Mehta                                                        --
//    Spring 2005                                                        --
//                                                                       --
//    Modified by Stephen Kempf 03-01-2006                               --
//                              03-12-2007                               --
//    Translated by Joe Meng    07-07-2013                               --
//    Fall 2014 Distribution                                             --
//                                                                       --
//    For use with ECE 298 Lab 7                                         --
//    UIUC ECE Department                                                --
//-------------------------------------------------------------------------


module puck (
	input Reset, frame_clk,
	input [9:0] Actor_X, Actor_Y, Actor_Size, Jump_X, Jump_Y, Jump_Size,
	output [9:0]  BallX, BallY, BallS,
	output hit_floor, hit_jump, hit_actor,
);
	
	logic [9:0] Ball_X_Pos, Ball_X_Motion, Ball_Y_Pos, Ball_Y_Motion, Ball_Size;
	 
	parameter [9:0] Ball_X_Center=320;  // Center position on the X axis
	parameter [9:0] Ball_Y_Center=240;  // Center position on the Y axis
	parameter [9:0] Ball_X_Min=0;       // Leftmost point on the X axis
	parameter [9:0] Ball_X_Max=639;     // Rightmost point on the X axis
	parameter [9:0] Ball_Y_Min=0;       // Topmost point on the Y axis
	parameter [9:0] Ball_Y_Max=479;     // Bottommost point on the Y axis
	parameter [9:0] Ball_X_Step=0;      // Step size on the X axis
	parameter [9:0] Ball_Y_Step=0;      // Step size on the Y axis
	parameter [9:0] Gravity=5;			// Gravity acting on the ball

	assign Ball_Size = 4;  // assigns the value 4 as a 10-digit binary number, ie "0000000100"
   
	always_ff @ (posedge Reset or posedge frame_clk )
	begin: Move_Ball
		if (Reset)  // Asynchronous Reset
		begin 
			Ball_Y_Motion <= 10'd0; //Ball_Y_Step;
			Ball_X_Motion <= 10'd0; //Ball_X_Step;

			Ball_Y_Pos <= Ball_Y_Center;
			Ball_X_Pos <= Ball_X_Center;
		end
		   
		else 
		begin 
			hit_floor <= 1b'0;
			if ( (Ball_Y_pos + Ball_Size) >= Ball_Y_Max )
				hit_floor <= 1b'1;

			else if ( (Ball_Y_Pos - Ball_Size) <= Ball_Y_Min )  // Ball is at the top edge, BOUNCE!
				Ball_Y_Motion <= Ball_Y_Step;

			else if ( ( ( Ball_Y_pos + Ball_Size ) >= ( Actor_Y + Actor_Size ) ) && ( Ball_X_pos <= Actor_X + Actor_Size ) && ( Ball_X_pos >= Actor_X - Actor_Size ) )
				Ball_Y_Motion <= !Ball_Y_Step;

			else if ( ( ( Ball_Y_pos + Ball_Size ) >= ( Jump_Y + Jump_Size ) ) && ( Ball_X_pos <= Jump_X + Jump_Size ) && ( Ball_X_pos >= Jump_X - Jump_Size ) )
				Ball_Y_Motion <= !Ball_Y_Step;
				
			else
				Ball_Y_Motion <= Ball_Y_Motion;

			Ball_X_Motion <= Ball_X_Motion;  // You need to remove this and make both X and Y respond to keyboard input
			
			Ball_Y_Pos <= (Ball_Y_Pos + Ball_Y_Motion + Gravity);  // Update ball position
			Ball_X_Pos <= (Ball_X_Pos + Ball_X_Motion);
		end  
	end
	   
	assign BallX = Ball_X_Pos;
   
	assign BallY = Ball_Y_Pos;
   
	assign BallS = Ball_Size;
	

endmodule
